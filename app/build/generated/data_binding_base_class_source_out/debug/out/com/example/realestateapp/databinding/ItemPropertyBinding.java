// Generated by view binder compiler. Do not edit!
package com.example.realestateapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.realestateapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPropertyBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView categoryPropertyImage;

  @NonNull
  public final TextView categoryPropertyTitle;

  @NonNull
  public final LinearLayout firstLayout;

  @NonNull
  public final CardView parentLayout1;

  private ItemPropertyBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView categoryPropertyImage, @NonNull TextView categoryPropertyTitle,
      @NonNull LinearLayout firstLayout, @NonNull CardView parentLayout1) {
    this.rootView = rootView;
    this.categoryPropertyImage = categoryPropertyImage;
    this.categoryPropertyTitle = categoryPropertyTitle;
    this.firstLayout = firstLayout;
    this.parentLayout1 = parentLayout1;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPropertyBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPropertyBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_property, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPropertyBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.category_property_image;
      ImageView categoryPropertyImage = ViewBindings.findChildViewById(rootView, id);
      if (categoryPropertyImage == null) {
        break missingId;
      }

      id = R.id.category_property_title;
      TextView categoryPropertyTitle = ViewBindings.findChildViewById(rootView, id);
      if (categoryPropertyTitle == null) {
        break missingId;
      }

      id = R.id.first_layout;
      LinearLayout firstLayout = ViewBindings.findChildViewById(rootView, id);
      if (firstLayout == null) {
        break missingId;
      }

      id = R.id.parent_layout1;
      CardView parentLayout1 = ViewBindings.findChildViewById(rootView, id);
      if (parentLayout1 == null) {
        break missingId;
      }

      return new ItemPropertyBinding((RelativeLayout) rootView, categoryPropertyImage,
          categoryPropertyTitle, firstLayout, parentLayout1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
